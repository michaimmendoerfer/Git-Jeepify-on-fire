// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.4
// LVGL version: 8.3.6
// Project name: Jeepify

#include <Arduino.h>
#include <String.h>
#include "ui.h"
#include "lv_meter.h"
#include "peers.h"
#include "Jeepify.h"


extern bool ReadyToPair;
extern bool DebugMode;
extern bool ChangesSaved;

extern struct_Peer *ActivePeer;
extern struct_Peer *ActiveSelection;
extern struct_Periph *ActiveSens;
extern struct_Periph *ActiveSwitch;

extern struct_Peer   P[MAX_PEERS];

extern bool ToggleDebugMode();
extern bool ToggleSleepMode();
extern bool TogglePairMode();


extern void SavePeers();
extern void PrepareJSON();
extern void SendCommand(struct_Peer *Peer, String Cmd);

void ShowPeer(lv_event_t * e)
{
	
}

void Ui_Set_TogglePair(lv_event_t * e)
{
	if (TogglePairMode()) {
		lv_obj_add_state(ui_BtnSet2, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnSet2, LV_STATE_CHECKED);
	}
}

void Ui_Set_Restart(lv_event_t * e)
{
	ESP.restart();
}

void Ui_Set_Reset(lv_event_t * e)
{
	// Your code here
}

void Ui_Set_ToggleDebug(lv_event_t * e)
{
	if (ToggleDebugMode()) {
		lv_obj_add_state(ui_BtnSet7, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnSet7, LV_STATE_CHECKED);
	}
}

void Ui_SavePeers(lv_event_t * e)
{
    SavePeers();
	lv_obj_clear_state(ui_BtnSet8, LV_STATE_CHECKED);
}

void Ui_Peers_Prepare(lv_event_t * e)
{
	String Options = "";

	for (int PNr=0 ; PNr<MAX_PEERS ; PNr++) {
    if (P[PNr].Type) {
           
      if (Options) Options += "\n";
      
      if (millis()- P[PNr].TSLastSeen > OFFLINE_INTERVAL) Options += "off: <";
      else Options += "on:  <"; 
        
      Options += P[PNr].Name;

      switch (P[PNr].Type) {
        case SWITCH_1_WAY:   Options += "> PDC-1"; break;
        case SWITCH_2_WAY:   Options += "> PDC-2"; break;
        case SWITCH_4_WAY:   Options += "> PDC-4"; break;
        case SWITCH_8_WAY:   Options += "> PDC-8"; break;
        case PDC_SENSOR_MIX: Options += "> MIX";   break;
        case BATTERY_SENSOR: Options += "> Sens";  break;
		default:		     Options += "> ???";   break;
      }
    }
  }
  //lv_roller_set_options(ui_RollerPeers1, Options.c_str(), LV_ROLLER_MODE_NORMAL);
  lv_roller_set_options(ui_RollerPeers1, "on:  <EPS32-1> PDC-2\noff: <EPS32-2> PDC-2", LV_ROLLER_MODE_NORMAL);
}

void Ui_Peers_Selected(lv_event_t * e)
{
	char buf[100];
	
	lv_roller_get_selected_str(ui_RollerPeers1, buf, 100);
	sscanf(buf, "<%s>", buf);

	ActivePeer = FindPeerByName(buf);

	if (ActivePeer) _ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_FADE_ON, 50, 0, &ui_ScrPeer_screen_init);
}

void Ui_JSON_Prepare(lv_event_t * e)
{
	PrepareJSON();
}

void UI_Set_Prepare(lv_event_t * e)
{
	if (ReadyToPair) {
		lv_obj_add_state(ui_BtnSet2, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnSet2, LV_STATE_CHECKED);
	}

	if (DebugMode) {
		lv_obj_add_state(ui_BtnSet7, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnSet7, LV_STATE_CHECKED);
	}

	if (!ChangesSaved) {
		lv_obj_add_state(ui_BtnSet8, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnSet8, LV_STATE_CHECKED);
	}

	/*
	if (ReadyToPair) {
		if (!lv_obj_has_state(ui_BtnSet2, LV_STATE_CHECKED)) {
			lv_obj_add_state(ui_BtnSet2, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet2, LV_EVENT_REFRESH, NULL);
		}
	}
	else {
		if (lv_obj_has_state(ui_BtnSet2, LV_STATE_CHECKED)) {
			lv_obj_clear_state(ui_BtnSet2, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet2, LV_EVENT_REFRESH, NULL);
		}
	}
	
	if (DebugMode) {
		if (!lv_obj_has_state(ui_BtnSet7, LV_STATE_CHECKED)) {
			lv_obj_add_state(ui_BtnSet7, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet7, LV_EVENT_REFRESH, NULL);
		}
	}
	else {
		if (lv_obj_has_state(ui_BtnSet7, LV_STATE_CHECKED)) {
			lv_obj_clear_state(ui_BtnSet7, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet7, LV_EVENT_REFRESH, NULL);
		}
	}

	if (!ChangesSaved) {
		if (!lv_obj_has_state(ui_BtnSet8, LV_STATE_CHECKED)) {
			lv_obj_add_state(ui_BtnSet8, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet8, LV_EVENT_REFRESH, NULL);
		}
	}
	else {
		if (lv_obj_has_state(ui_BtnSet8, LV_STATE_CHECKED)) {
			lv_obj_clear_state(ui_BtnSet8, LV_STATE_CHECKED);
			lv_event_send(ui_BtnSet8, LV_EVENT_REFRESH, NULL);
		}
	}
	*/
}

void Ui_Single_Next(lv_event_t * e)
{
	if (ActiveSens) ActiveSens = FindNextPeriph(ActiveSens, SENS_TYPE_SENS, false);
	_ui_screen_change(&ui_ScrSingle, LV_SCR_LOAD_ANIM_FADE_ON, 50, 0, &ui_ScrSingle_screen_init);

}

void Ui_Single_Last(lv_event_t * e)
{
	if (ActiveSens) ActiveSens = FindPrevPeriph(ActiveSens, SENS_TYPE_SENS, false);
	_ui_screen_change(&ui_ScrSingle, LV_SCR_LOAD_ANIM_FADE_ON, 50, 0, &ui_ScrSingle_screen_init);
}

void Ui_Peer_Prepare(lv_event_t * e)
{
	lv_label_set_text_static(ui_LblPeer1, ActivePeer->Name);
	
	if (ActivePeer->SleepMode) {
		lv_obj_add_state(ui_BtnPeer3, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnPeer3, LV_STATE_CHECKED);
	}
	if (ActivePeer->DemoMode) {
		lv_obj_add_state(ui_BtnPeer6, LV_STATE_CHECKED);
	}
	else {
		lv_obj_clear_state(ui_BtnPeer6, LV_STATE_CHECKED);
	}
}

void Ui_Peer_Restart(lv_event_t * e)
{
	SendCommand(ActivePeer, "Restart");
}

void Ui_Peer_Reset(lv_event_t * e)
{
	SendCommand(ActivePeer, "Reset");
}

void Ui_Peer_ToggleSleep(lv_event_t * e)
{
	SendCommand(ActivePeer, "SleepMode Toggle");
}

void Ui_Multi_Next(lv_event_t * e)
{
	// Your code here
}

void Ui_Multi_Last(lv_event_t * e)
{
	// Your code here
}

void Ui_Peer_Next(lv_event_t * e)
{
	ActivePeer = FindNextPeer(ActivePeer, MODULE_ALL); 
	_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_FADE_ON, 50, 0, &ui_ScrPeer_screen_init);
}
void Ui_Peer_Last(lv_event_t * e)
{
	ActivePeer = FindPrevPeer(ActivePeer, MODULE_ALL); 
	_ui_screen_change(&ui_ScrPeer, LV_SCR_LOAD_ANIM_FADE_ON, 50, 0, &ui_ScrPeer_screen_init);
}

void Ui_Peer_Eichen(lv_event_t * e)
{
	SendCommand(ActivePeer, "Eichen");
}

void Ui_Peer_Volt(lv_event_t * e)
{
	// Your code here
}

void Ui_Single_Prepare(lv_event_t * e)
{		
	static lv_obj_t *meter = lv_meter_create(ui_ScrPeer);
    lv_obj_center(meter);
    lv_obj_set_size(meter, 200, 200);

    /*Add a scale first*/
    lv_meter_scale_t * scale = lv_meter_add_scale(meter);
    lv_meter_set_scale_ticks(meter, scale, 41, 2, 10, lv_palette_main(LV_PALETTE_GREY));
    lv_meter_set_scale_major_ticks(meter, scale, 8, 4, 15, lv_color_black(), 10);

    lv_meter_indicator_t * indic;

    /*Add a blue arc to the start*/
    indic = lv_meter_add_arc(meter, scale, 3, lv_palette_main(LV_PALETTE_BLUE), 0);
    lv_meter_set_indicator_start_value(meter, indic, 0);
    lv_meter_set_indicator_end_value(meter, indic, 20);

    /*Make the tick lines blue at the start of the scale*/
    indic = lv_meter_add_scale_lines(meter, scale, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_BLUE), false, 0);
    lv_meter_set_indicator_start_value(meter, indic, 0);
    lv_meter_set_indicator_end_value(meter, indic, 20);

    /*Add a red arc to the end*/
    indic = lv_meter_add_arc(meter, scale, 3, lv_palette_main(LV_PALETTE_RED), 0);
    lv_meter_set_indicator_start_value(meter, indic, 80);
    lv_meter_set_indicator_end_value(meter, indic, 100);

    /*Make the tick lines red at the end of the scale*/
    indic = lv_meter_add_scale_lines(meter, scale, lv_palette_main(LV_PALETTE_RED), lv_palette_main(LV_PALETTE_RED), false, 0);
    lv_meter_set_indicator_start_value(meter, indic, 80);
    lv_meter_set_indicator_end_value(meter, indic, 100);

    /*Add a needle line indicator*/
    indic = lv_meter_add_needle_line(meter, scale, 4, lv_palette_main(LV_PALETTE_GREY), -10);
}

void Ui_Peer_ToggleDemo(lv_event_t * e)
{
	SendCommand(ActivePeer, "DemoMode Toggle");
}
